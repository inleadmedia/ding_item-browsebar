<?php

/**
 * @file
 * Carousel widget for search results with a predefined search query.
 * Defines own content type.
 */

/**
 * Implements hook_menu().
 */
function carousel_menu() {

  $items['admin/config/ding/carousel'] = array(
    'title' => 'Carousel widget settings',
    'description' => 'Configure carousel options such as search keyword, number of items etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('carousel_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ding/carousel/filter/%'] = array(
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'carousel_filter',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function carousel_block_info() {
  $blocks['main'] = array(
    'info' => t('Carousel widget'),
    'region' => 'content',
    'weight' => 0,
  );

  return $blocks;
}

/**
 * Implements hook_theme().
 */
function carousel_theme($existing, $type, $theme, $path) {
  $hooks['carousel'] = array(
    'variables' => array('carousel_items' => NULL, 'facets' => NULL),
    'template' => 'carousel',
    'path'  => $path . '/templates'
  );

  $hooks['carousel_items'] = array(
    'variables' => array('carousel_items' => NULL),
    'template' => 'carousel_items',
    'path'  => $path . '/templates'
  );

  $hooks['secondary_nav'] = array(
    'variables' => array('menu' => NULL),
    'template' => 'type_filter_menu',
    'path' => $path . '/templates',
  );

  $hooks['browserbar_filter'] = array(
    'variables' => array('facets' => NULL, 'active_facet' => NULL),
    'template' => 'browserbar_filter',
    'path' => $path . '/templates',
  );

  return $hooks;
}

/**
 * Implements hook_block_view().
 */
function carousel_block_view($delta) {


  // Creatin of easyting secondary menu
  $tree = array();
  $tree = menu_tree_all_data('menu-easyting-secondary-menu');
  if (empty($tree)) {
    $menu = array(
    'menu_name' => 'menu-easyting-secondary-menu',
    'title' => 'Easyting secondary menu',
    'description' => '',
    );
    menu_save($menu);
    $item = array(
      'link_title' => t('boger'),
      'link_path' => drupal_get_normal_path('ding/carousel/filter/bog'),
      'menu_name' => 'menu-easyting-secondary-menu',
      'weight' => 1,
    );
    menu_link_save($item);
    menu_cache_clear_all();
    $item = array(
      'link_title' => t('film'),
      'link_path' => drupal_get_normal_path('ding/carousel/filter/dvd'),
      'menu_name' => 'menu-easyting-secondary-menu',
      'weight' => 2,
    );
    menu_link_save($item);
    menu_cache_clear_all();
    $item = array(
      'link_title' => t('lyd'),
      'link_path' => drupal_get_normal_path('ding/carousel/filter/lydbog (online)'),
      'menu_name' => 'menu-easyting-secondary-menu',
      'weight' => 3,
    );
    menu_link_save($item);
    menu_cache_clear_all();
    $item = array(
      'link_title' => t('spil'),
      'link_path' => drupal_get_normal_path('ding/carousel/filter/playstation2-spil'),
      'menu_name' => 'menu-easyting-secondary-menu',
      'weight' => 4,
    );
    menu_link_save($item);
    menu_cache_clear_all();
  }
  menu_rebuild();


  switch ($delta) {
    case 'main':
      drupal_add_library('system', 'drupal.ajax');
      drupal_add_js(drupal_get_path('module', 'carousel') . '/js/jquery.carouFredSel-4.4.2.js', 'file');
      drupal_add_js(drupal_get_path('module', 'carousel') . '/js/carousel_init.js', 'file');

      $response = carousel_load_items('bog');

      $block['content'] = theme('carousel', array(
            'carousel_items' => theme('carousel_items', array('carousel_items' => $response['items'])),
            'facets' => $response['facets']));
      break;
  }

  return $block;
}

/**
 * Carousel configuration form.
 *
 * @see system_settings_form()
 */
function carousel_admin_settings() {
  $form['carousel_keyword'] = array(
    '#type' => 'textfield',
    '#title' => t('Search keyword'),
    '#description' => t('The keyword used to search by in Ting.'),
    '#default_value' => variable_get('carousel_keyword')

  );

  $form['carousel_item_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Item limit'),
    '#description' => t('The number of items to be returned in search result.'),
    '#default_value' => variable_get('carousel_item_limit', 24)
  );

  $form['carousel_cache_ttl'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache TTL'),
    '#description' => t('How many hours the cache lives.'),
    '#default_value' => variable_get('carousel_cache_ttl', 1)
  );

  return system_settings_form($form);
}

/**
 * Validate settings submission.
 */
function carousel_admin_settings_validate($form, &$form_state) {
  $limit = $form_state['values']['carousel_item_limit'];
  $cache_ttl = $form_state['values']['carousel_cache_ttl'];
  if (!is_numeric($limit)) {
    form_set_error('carousel_item_limit', t('Please enter a valid number.'));
  }

  if (!is_numeric($cache_ttl)) {
    form_set_error('carousel_cache_ttl', t('Please enter a valid number.'));
  }
}

/**
 * Preprocess Ting request with facets
 *
 * @param string $keyword
 * @param string $type
 * @param string $subject
 * @return string
 */
function carousel_facets_request_builder($keyword, $type, $subject) {
  return '(' . $keyword . ') AND facet.type="' . $type . '"' .
          ($subject != '' ? ' AND facet.subject="' . $subject . '"' : '');
}

/**
 * Retrieves search results either from Ting or
 * from cache.
 * @return array Search result items
 */
function carousel_load_items($type = 'bog', $subject = '') {
  $keyword = variable_get('carousel_keyword');
  $items = NULL;

  if ($keyword) {
    $cid = 'carousel-' . md5($keyword . $type . $subject);
    if (!($items = cache_get($cid)) || 1) {
      module_load_include('client.inc', 'ting');
      $request = carousel_facets_request_builder($keyword, $type, $subject);
      $result = carousel_search_ting($request, variable_get('carousel_item_limit', 24));
      $items = array();

      foreach ($result->collections as $collection) {
        $searchItem = $collection->reply->objects[0];

        $item = new stdClass();
        $item->id = $searchItem->id;
        $item->isbn = isset($searchItem->record['dc:identifier']['dkdcplus:ISBN'][0]) ?
                      $searchItem->record['dc:identifier']['dkdcplus:ISBN'][0] : NULL;
        $item->ac_source = isset($searchItem->record['ac:source'][''][0]) ?
                            $searchItem->record['ac:source'][''][0] : NULL;
        $item->dc_source = isset($searchItem->record['dc:source'][''][0]) ?
                            $searchItem->record['dc:source'][''][0] : NULL;
        $item->title = $searchItem->record['dc:title'][''][0];

        if (isset($searchItem->record['dc:creator'])) {
          if (isset($searchItem->record['dc:creator']['oss:aut'][0])) {
            $item->creator = $searchItem->record['dc:creator']['oss:aut'][0];
          }
          elseif (isset($searchItem->record['dc:creator']['oss:mus'][0])) {
            $item->creator = $searchItem->record['dc:creator']['oss:mus'][0];
          }
          elseif (isset($searchItem->record['dc:creator']['oss:sort'][0])) {
            $item->creator = $searchItem->record['dc:creator']['oss:sort'][0];
          }
          else {
            $item->creator = NULL;
          }
        }
        else {
          $item->creator = NULL;
        }

        if (isset($searchItem->record['dc:subject']['dkdcplus:DK5-Text'][0])) {
          $item->subject = $searchItem->record['dc:subject']['dkdcplus:DK5-Text'][0];
        }
        elseif (isset($searchItem->record['dc:subject']['oss:genre'][0])) {
          $item->subject = $searchItem->record['dc:subject']['oss:genre'][0];
        }
        elseif (isset($searchItem->record['dc:subject'][''][0])) {
          $item->subject = $searchItem->record['dc:subject'][''][0];
        }
        else {
          $item->subject = NULL;
        }

        // Exracting images
        $path = ting_covers_object_path($searchItem->localId);

        if (file_exists($path)) {
          //If we we already have a valid cover image w/o style then just use it
          $item->image = $path;
        }
        else {
          //Mark the image for retrieval;
          $missing_images_local_ids[] = $searchItem->localId;
        }
       // $item->image = 'ting_item.jpg';

        if (isset($searchItem->record['dc:description'][''][0])) {
          /**
           * @todo: Which field of three is description?
           */
          $item->description = $searchItem->record['dc:description'][''][0];
        }
        elseif (isset($searchItem->record['dcterms:abstract'][''][0])) {
          $item->description = $searchItem->record['dcterms:abstract'][''][0];
        }
        elseif (isset($searchItem->record['dcterms:hasPart'])) {
          $item->description = $searchItem->record['dcterms:hasPart']['oss:track'];
        }
        else {
          $item->description = '';
        }

        // Cut the description if it too long
        if (drupal_strlen($item->description) > 275) {
          $item->description = utf8_encode(drupal_substr(utf8_decode($item->description), 0, 275)) . '...';
        }

        $item->year = isset($searchItem->record['dc:date'][''][0]) ?
                        $searchItem->record['dc:date'][''][0] : NULL;
        // Default values
        $item->type = 1;
        $item->is_new = mt_rand(0, 1);
        $item->rating = 0;
        $item->rating_count = 0;
        $item->comment_count = 0;

        $items[$searchItem->localId] = $item;
      }

      // Make an array of local id's, fetchable by voxb
      $local_ids = array();
      foreach ($items as $k => $v) {
        $local_ids[] = $k;
      }

      // Fetch details from voxb
      $voxb_details = new VoxbItems();
      $voxb_details->addReviewHandler('review', new VoxbReviews());
      $response = $voxb_details->fetchByFaust($local_ids);

      // Assign voxb details to items
      if ($response) {
        $c = $voxb_details->getCount();
        if ($c > 0) {
          for ($i = 0; $i < $c; $i++) {
            $detail = $voxb_details->getItem($local_ids[$i]);
            $items[$local_ids[$i]]->rating = (int)round($detail->getRating() / 20);
            $items[$local_ids[$i]]->rating_count = $detail->getRatingCount();
            $items[$local_ids[$i]]->comment_count = $detail->getReviews('review')->getCount();
          }
        }
      }

      $items = array('items' => $items, 'facets' => $result->facets);

      if (is_array($missing_images_local_ids)) {
        carousel_get_images_from_addi($items, $missing_images_local_ids);

        cache_set($cid, $items, 'cache',
          REQUEST_TIME + variable_get('carousel_cache_ttl', 2) * 60 * 60);
      }
    }
    else {
      $items = $items->data;
    }
  }

  return $items;
}

/**
 * Requ
 * @param array $itemsests Addi for covers that are not yet cached by drupal
 * @param array $missing_images_local_ids
 */
function carousel_get_images_from_addi(&$items, $missing_images_local_ids) {
  require_once drupal_get_path('module', 'ting_covers') . '/ting_covers.pages.inc';
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));

  try {
    //Local ids = Faust numbers. Library object identifiers can be confusing...
    $additional_informations = $service->getByFaustNumber($missing_images_local_ids);
  } catch (Exception $e) {
    return;
  }

  foreach ($missing_images_local_ids as $local_id) {
    //Try to extract the image url from the result
    $source_url = FALSE;
    if (isset($additional_informations[$local_id]) && $ai = $additional_informations[$local_id]) {
      if ($ai->detailUrl) {
        $source_url = $ai->detailUrl;
      }
      elseif ($ai->thumbnailUrl) {
        $source_url = $ai->thumbnailUrl;
      }
    }

    //No cover image found? Cache this for future reference to avoid unnecessary requests
    if (!$source_url && FALSE) {
      cache_set('ting_covers:' . $local_id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_CACHE_LIFETIME);
      continue;
    }

    //Try to download the image locally
    if ($file = _ting_covers_pages_fetch_image(ting_covers_object_path($local_id), $source_url)) {
      //Generate a path corresponding to the downloaded image, styled
      $items[$local_id]->image = image_style_url('ding_medium', $file->uri);
    }
  }
}

/**
 * Make an item search
 *
 * @param $query
 *   The searched query
 * @param $records
 *   Limit the amount of fetched records
 * @param $page
 *   Records offset
 * @return
 *   Search result data
 */
function carousel_search_ting($query, $records) {
  if (!empty($query)) {
    $query = '(' . $query . ')';

    $options = array(
      'allObjects' => FALSE,
      'enrich' => TRUE
    );

    $search_result = ting_do_search($query, 1, $records, $options);

    return $search_result;
  }
}

/**
 *
 * @param type $type
 * @param type $subject
 */
function carousel_filter($type) {
  $subject = $_REQUEST['facet'] ? $_REQUEST['facet'] : '';
  $response = carousel_load_items($type, $subject);
  $content = theme('carousel_items',
          array('carousel_items' => $response['items']));


  $commands[] = array(
          'command' => 'carousel_refresh',
          'content' => $content
        );

  $commands[] = array(
          'command' => 'carousel_update_facets',
          'content' => theme('browserbar_filter', array('facets' => $response['facets'], 'active_facet' => $subject))
        );


  $result = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($result);
}
