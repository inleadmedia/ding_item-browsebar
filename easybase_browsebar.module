<?php

/**
 * @file
 * Carousel widget for search results with a predefined search query.
 * Defines own content type.
 */

define('TITLE_LARGE', 36);
define('TITLE_SMALL', 18);
define('DESCRIPTION_SMALL', 145);

/**
 * Implements hook_init().
 */
function easybase_browsebar_init() {
  drupal_add_css(drupal_get_path('module', 'easybase_browsebar') . '/css/item-browsebar_style.css', 'file');
}

/**
 * Implements hook_menu().
 */
function easybase_browsebar_menu() {
  $items['admin/config/ding/easybase_browsebar'] = array(
    'title' => 'Easybase browsebar settings',
    'description' => 'Configure borwsebar options such as search keyword, number of items etc.',
    'page callback' => 'easybase_browsebar_admin_page',
    'page arguments' => array(),
    'access arguments' => array('access administration pages'),
    'file' => 'easybase_browsebar.admin.inc',
  );

  $items['ding/easybase_browsebar/filter/%'] = array(
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'easybase_browsebar_filter',
  );

  $items['ding/easybase_browsebar/view/%'] = array(
    'page arguments' => array(3, 'bog', ''),
    'type' => MENU_CALLBACK,
    'access arguments' => array('search content'),
    'page callback' => 'easybase_browsebar_view',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function easybase_browsebar_block_info() {
  $blocks['main'] = array(
    'info' => t('Carousel widget'),
    'region' => 'content',
    'weight' => 0,
  );

  return $blocks;
}

/**
 * Implements hook_theme().
 */
function easybase_browsebar_theme($existing, $type, $theme, $path) {
  $hooks['carousel'] = array(
    'variables' => array('carousel_items' => NULL, 'facets' => NULL),
    'template' => 'carousel',
    'path'  => $path . '/templates',
  );

  $hooks['carousel_items'] = array(
    'variables' => array('carousel_items' => NULL),
    'template' => 'carousel_items',
    'path'  => $path . '/templates',
  );

  $hooks['carousel_views'] = array(
    'variables' => array('carousel_views' => NULL),
    'template' => 'carousel_views',
    'path' => $path . '/templates',
  );

  $hooks['browserbar_filter'] = array(
    'variables' => array('facets' => NULL, 'active_facet' => NULL),
    'template' => 'browserbar_filter',
    'path' => $path . '/templates',
  );

  $hooks['easybase_browsebar_admin_form'] = array(
    'render element' => 'form',
  );

  return $hooks;
}

/**
 * Implements hook_block_view().
 */
function easybase_browsebar_block_view($delta) {
  switch ($delta) {
    case 'main':
      drupal_add_library('system', 'drupal.ajax');
      drupal_add_js(drupal_get_path('module', 'easybase_browsebar') . '/js/jquery.carouFredSel-4.4.2.js', 'file');
      drupal_add_js(drupal_get_path('module', 'easybase_browsebar') . '/js/jquery.touchwipe.1.1.1.js', 'file');
      drupal_add_js(drupal_get_path('module', 'easybase_browsebar') . '/js/carousel_init.js', 'file');

      $response = easybase_browsebar_load_items('bog');
      $first_tab = array_shift($response);
      
      $block['content'] = ($first_tab != NULL) ? theme('carousel', array(
            'carousel_items' => theme('carousel_items', array('carousel_items' => $first_tab['items'])),
            'views' => variable_get('easybase_browsebar_search_queries', array()),
            'facets' => $first_tab['facets'])) : '';
      break;
  }

  return $block;
}

/**
 * Preprocess Ting request with facets
 *
 * @param string $keyword
 * @param string $type
 * @param string $subject
 * @return string
 */
function easybase_browsebar_facets_request_builder($keyword, $type, $subject) {
  return '(' . $keyword . ') AND facet.type="' . $type . '"' .
          ($subject != '' ? ' AND facet.subject="' . $subject . '"' : '');
}

/**
 * Retrieves search results either from Ting or
 * from cache.
 * 
 * @return array
 *   Search result items
 */
function easybase_browsebar_load_items($type = 'bog', $subject = '') {
  $keywords = variable_get('easybase_browsebar_search_queries', array());
  $items = array();
  $items_buffer = array();

  if (isset($keywords[0]) && is_array($keywords[0])) {
    module_load_include('client.inc', 'ting');
    foreach ($keywords as $item) {
      $keyword = $item['query'];
      $cid = easybase_browsebar_generate_cache_id($keyword, $type, $subject);
      
      if (!$items = cache_get($cid)) {
        $request = easybase_browsebar_facets_request_builder($keyword, $type, $subject);
        $result = easybase_browsebar_search_ting($request, variable_get('easybase_browsebar_item_limit', 24));
        $items = array();
        
        foreach ($result->collections as $collection) {
          $searchItem = $collection->reply->objects[0];
          
          $item = new stdClass();
          $item->id = $searchItem->id;
          $item->isbn = isset($searchItem->record['dc:identifier']['dkdcplus:ISBN'][0]) ?
                        $searchItem->record['dc:identifier']['dkdcplus:ISBN'][0] : NULL;
          $item->ac_source = isset($searchItem->record['ac:source'][''][0]) ?
                              $searchItem->record['ac:source'][''][0] : NULL;
          $item->dc_source = isset($searchItem->record['dc:source'][''][0]) ?
                              $searchItem->record['dc:source'][''][0] : NULL;
          $item->title = $searchItem->record['dc:title'][''][0];

          if (isset($searchItem->record['dc:creator'])) {
            if (isset($searchItem->record['dc:creator']['oss:aut'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:aut'][0];
            }
            elseif (isset($searchItem->record['dc:creator']['oss:mus'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:mus'][0];
            }
            elseif (isset($searchItem->record['dc:creator']['oss:sort'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:sort'][0];
            }
            else {
              $item->creator = NULL;
            }
          }
          else {
            $item->creator = NULL;
          }

          if (isset($searchItem->record['dc:subject']['dkdcplus:DK5-Text'][0])) {
            $item->subject = $searchItem->record['dc:subject']['dkdcplus:DK5-Text'][0];
          }
          elseif (isset($searchItem->record['dc:subject']['oss:genre'][0])) {
            $item->subject = $searchItem->record['dc:subject']['oss:genre'][0];
          }
          elseif (isset($searchItem->record['dc:subject'][''][0])) {
            $item->subject = $searchItem->record['dc:subject'][''][0];
          }
          else {
            $item->subject = NULL;
          }

          // Set image filepath.
          // Image existance will be checked further.
          $item->image = ting_covers_object_path($searchItem->localId);

          if (isset($searchItem->record['dc:description'][''][0])) {
            /**
             * @todo: Which field of three is description?
             */
            $item->description = $searchItem->record['dc:description'][''][0];
          }
          elseif (isset($searchItem->record['dcterms:abstract'][''][0])) {
            $item->description = $searchItem->record['dcterms:abstract'][''][0];
          }
          elseif (isset($searchItem->record['dcterms:hasPart'])) {
            $item->description = $searchItem->record['dcterms:hasPart']['oss:track'];
          }
          else {
            $item->description = '';
          }

          $item->year = isset($searchItem->record['dc:date'][''][0]) ?
                          $searchItem->record['dc:date'][''][0] : NULL;
          // Default values
          $item->type = 1;
          $item->is_new = mt_rand(0, 1);
          $item->rating = 0;
          $item->rating_count = 0;
          $item->comment_count = 0;

          $items[$searchItem->localId] = $item;
        }

        // Make an array of local id's, fetchable by voxb
        $local_ids = array();
        foreach ($items as $k => $v) {
          $local_ids[] = $k;
        }

        // Fetch details from voxb
        $voxb_details = new VoxbItems();
        $voxb_details->addReviewHandler('review', new VoxbReviews());
        $response = $voxb_details->fetchByFaust($local_ids);

        // Assign voxb details to items
        if ($response) {
          $c = $voxb_details->getCount();
          if ($c > 0) {
            for ($i = 0; $i < $c; $i++) {
              $detail = $voxb_details->getItem($local_ids[$i]);
              $items[$local_ids[$i]]->rating = (int)round($detail->getRating() / 20);
              $items[$local_ids[$i]]->rating_count = $detail->getRatingCount();
              $items[$local_ids[$i]]->comment_count = $detail->getReviews('review')->getCount();
            }
          }
        }

        easybase_browsebar_create_missed_covers($items);

        $items = array('items' => $items, 'facets' => $result->facets);

        cache_set($cid, $items, 'cache',
          REQUEST_TIME + variable_get('easybase_browsebar_cache_ttl', 2) * 60 * 60);

        $items_buffer[$cid] = $items;
      }
      else {
        $items_buffer[$cid] = $items->data;
      }
    }
  }

  // @todo
  // Dunno if this return is still usable in new workflow
  return $items_buffer;
}

/**
 * Request
 * @param array $itemsests Addi for covers that are not yet cached by drupal
 * @param array $missing_images_local_ids
 */
function easybase_browsebar_get_images_from_addi(&$items, $missing_images_local_ids) {
  require_once drupal_get_path('module', 'ting_covers') . '/ting_covers.pages.inc';
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));

  try {
    //Local ids = Faust numbers. Library object identifiers can be confusing...
    $additional_informations = $service->getByFaustNumber($missing_images_local_ids);
  } catch (Exception $e) {
    return;
  }

  foreach ($missing_images_local_ids as $local_id) {
    //Try to extract the image url from the result
    $source_url = FALSE;
    if (isset($additional_informations[$local_id]) && $ai = $additional_informations[$local_id]) {
      if ($ai->detailUrl) {
        $source_url = $ai->detailUrl;
      }
      elseif ($ai->thumbnailUrl) {
        $source_url = $ai->thumbnailUrl;
      }
    }

    //No cover image found? Cache this for future reference to avoid unnecessary requests
    if (!$source_url && FALSE) {
      cache_set('ting_covers:' . $local_id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_CACHE_LIFETIME);
      continue;
    }

    //Try to download the image locally
    if ($file = _ting_covers_pages_fetch_image(ting_covers_object_path($local_id), $source_url)) {
      //Generate a path corresponding to the downloaded image, styled
      $items[$local_id]->image = $file->uri;
    }
    else {
      $items[$local_id]->image = easybase_browsebar_default_image();
    }
  }
}

/**
 * Make an item search
 *
 * @param $query
 *   The searched query
 * @param $records
 *   Limit the amount of fetched records
 * @param $page
 *   Records offset
 * @return
 *   Search result data
 */
function easybase_browsebar_search_ting($query, $records) {
  if (!empty($query)) {
    $query = '(' . $query . ')';

    $options = array(
      'allObjects' => FALSE,
      'enrich' => TRUE,
    );

    $search_result = ting_do_search($query, 1, $records, $options);

    return $search_result;
  }
}

/**
 * Refine carousel items baes on selected filter.
 *
 * @param type $type
 * @param type $subject
 */
function easybase_browsebar_filter($type) {
  $subject = $_REQUEST['facet'] ? $_REQUEST['facet'] : '';
  $tab = $_REQUEST['tab'] ? (int)$_REQUEST['tab'] : 0;
  $keywords = variable_get('easybase_browsebar_search_queries', array());
  $keyword = $keywords[$tab]['query'];
  $cid = easybase_browsebar_generate_cache_id($keyword, $type, $subject);

  $response = easybase_browsebar_load_items($type, $subject);

  $content = theme('carousel_items',
          array('carousel_items' => $response[$cid]['items']));

  $commands[] = array(
    'command' => 'carousel_refresh',
    'content' => $content
  );

  $commands[] = array(
    'command' => 'carousel_update_facets',
    'content' => theme('browserbar_filter', array('facets' => $response[$cid]['facets'], 'active_facet' => $subject, 'tab' => $tab))
  );

  $result = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($result);
}

/**
 * Update the carousel with new item collection.
 *
 * @param $index
 *   Cached item collection index.
 * @param $type
 *   Item type, defaults to book.
 * @param $subject
 *   Item filter, defaults to none.
 */
function easybase_browsebar_view($index, $type = 'bog', $subject = '') {
  $commands = array();
  $keywords = variable_get('easybase_browsebar_search_queries', array());
  $cid = easybase_browsebar_generate_cache_id($keywords[$index]['query'], $type, $subject);

  $response = easybase_browsebar_load_items($type, $subject);
  $items_data = $response[$cid];
  $content = theme('carousel_items', array('carousel_items' => $items_data['items']));

  $commands[] = array(
    'command' => 'carousel_refresh',
    'content' => $content,
    'tab' => $index,
  );

  $commands[] = array(
    'command' => 'carousel_update_facets',
    'content' => theme('browserbar_filter', array('facets' => $items_data['facets'], 'active_facet' => $subject, 'tab' => $index))
  );

  $commands[] = ajax_command_invoke('.search-controller li', 'removeClass', array('active'));
  $commands[] = ajax_command_invoke('.search-controller li:eq(' . $index . ')', 'addClass', array('active'));
  $commands[] = ajax_command_invoke('#carousel-menu h2', 'html', array(htmlspecialchars($keywords[$index]['title'])));

  $commands[] = ajax_command_invoke('#carousel .active .item-overlay', 'show');
  $commands[] = ajax_command_invoke('#carousel .active .item-overlay-details', 'show');
  $result = array('#type' => 'ajax', '#commands' => $commands);

  ajax_deliver($result);
}

/**
 * Generates cache id for carousel cache entries.
 */
function easybase_browsebar_generate_cache_id($keyword, $type, $subject = '') {
  return 'easybase_browsebar-' . md5($keyword . $type . $subject);
}

/**
 * Create missed covers.
 */
function easybase_browsebar_create_missed_covers(&$items) {
  foreach ($items as $item_id => $item) {
    if (!file_exists($item->image)) {
      $missing_images_ids[] = $item_id;
    }
  }
  if (!empty($missing_images_ids)) {
    easybase_browsebar_get_images_from_addi($items, $missing_images_ids);
  }
}

/**
 * Returns path to default image.
 */
function easybase_browsebar_default_image() {
  return drupal_get_path('module', 'easybase_browsebar') . '/images/default.png';
}
